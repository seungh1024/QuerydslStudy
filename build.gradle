plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'

    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}



repositories {
    mavenCentral()
}

bootJar.enabled = false

subprojects{
    group = 'com.seungh1024'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        runtimeOnly 'mysql:mysql-connector-java'

        //querydsl
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    }

    //querydsl 추가 시작
//    def querydslDir = "$buildDir/generated/querydsl"
//
//    querydsl{
//        jpa = true
//        querydslSourcesDir = querydslDir
//    }
//    sourceSets{
//        main.java.srcDir querydslDir
//    }
//    configurations {
//        querydsl.extendsFrom compileClasspath
//    }
//    compileQuerydsl{
//        options.annotationProcessorPath = configurations.querydsl
//    }
    //querydsl 추가 끝

    tasks.named('test') {
        useJUnitPlatform()
    }
}


['server'].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir { dir ->
        def projectName = ":${it}-${dir.name}"
        project(projectName) {
        }
    }
}